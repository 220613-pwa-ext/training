package com.revature.dao;

import com.revature.model.User;
import com.revature.utility.ConnectionUtility;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDao {
    // CRUD operations

    // Take in User object and return user object with auto-generated ID
    public User createUser(User user) throws SQLException {

        // Try-with-resources
        // Whatever object is being used within the () will automatically be closed
        // whenever the try-with-resources is done executing OR an exception occurs
        try (Connection con = ConnectionUtility.createConnection()) {
            PreparedStatement pstmt = con.prepareStatement("INSERT INTO users (username, password, email) VALUES (?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, user.getUsername());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getEmail());

            // executeUpdate is used to execute DML statements
            // Particularly, INSERT, UPDATE, and DELETE
            int numberOfRecordsInserted = pstmt.executeUpdate();

            // Retrieve autogenerated ID PK
            ResultSet rs = pstmt.getGeneratedKeys();
            rs.next(); // Moves the "cursor" to the next row in the ResultSet
            int autogeneratedId = rs.getInt(1);

            return new User(autogeneratedId, user.getUsername(), user.getPassword(), user.getEmail());
        }

    }

    // Read
    public List<User> getAllUsers() throws SQLException {
        List<User> users = new ArrayList<>();

        try (Connection con = ConnectionUtility.createConnection()) {
            Statement stmt = con.createStatement();

            ResultSet rs = stmt.executeQuery("SELECT * FROM users");

            // rs.next does two things
            // 1. moves the cursor to the next record
            // 2. returns a boolean that is true if there is a next record, false if there's no more records
            while (rs.next()) {
                int id = rs.getInt("id");
                String username = rs.getString("username");
                String password = rs.getString("password");
                String email = rs.getString("email");

                User user = new User(id, username, password, email);

                users.add(user); // Add user object to users List
            }

            return users;
        }
    }

    public User getUserByUsernameAndPassword(String username, String password) throws SQLException {
        try (Connection con = ConnectionUtility.createConnection()) {
            PreparedStatement pstmt = con.prepareStatement("SELECT * FROM users WHERE username = ? AND password = ?");

            pstmt.setString(1, username);
            pstmt.setString(2, password);

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return new User(rs.getInt("id"), rs.getString("username"), rs.getString("password"), rs.getString("email")); // Move cursor to first result (there should only be one anyways)
            } else {
                return null;
            }

        }
    }

    // Update user using the id provided in the user object parameter
    // Username, password, and email can be updated
    public User updateUser(User user) throws SQLException {
        try (Connection con = ConnectionUtility.createConnection()) {
            PreparedStatement pstmt = con.prepareStatement("UPDATE users SET username=?, password=?, email=? WHERE id=?");

            pstmt.setString(1, user.getUsername());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getEmail());

            pstmt.setInt(4, user.getId());

            int numberOfUpdatedRecords = pstmt.executeUpdate();

            return new User(user.getId(), user.getUsername(), user.getPassword(), user.getEmail());
        }
    }

    public boolean deleteUserById(int id) throws SQLException {
        try (Connection con = ConnectionUtility.createConnection()) {
            PreparedStatement pstmt = con.prepareStatement("DELETE FROM users WHERE id = ?");

            pstmt.setInt(1, id);

            int numberOfRecordsDeleted = pstmt.executeUpdate();

            return numberOfRecordsDeleted == 1; // true if record was deleted, false if not
        }
    }
}
